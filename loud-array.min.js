const privateKey={id:([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16))};export default class LoudArray extends Array{constructor(e,...t){super(...t),this._private=new WeakMap,this._private.set(privateKey,{listeners:e||[]});const r="copyWithin fill pop push reverse shift sort splice unshift".split(" "),i=this._private.get(privateKey);for(let e=0;e<r.length;e++){let t=r[e];i[t]=this[t].bind(this),this[t]=((...e)=>{let r=i.listeners.filter(e=>{if("copyWithin"===t&&e.event.indexOf("copy-within")>-1)return!0;let r=e.event.toLowerCase();return r.indexOf(t)>-1||r.indexOf("any")>-1||r.indexOf("all")>-1});_dispatchEvents(this,r,"before",e);let s=i[t](...e);return _dispatchEvents(this,r,"after",e),s})}}addEventListener(e,t){const r=this._private.get(privateKey);let i=_array_findListener(this,e,t);if(i>-1)return r.listeners[i];let s=e;return e instanceof ArrayListener||(s=new ArrayListener(e,t)),r.listeners.push(s),s}removeEventListener(e,t){let r=_array_findListener(this,e,t);if(-1==r)return;this._private.get(privateKey).listeners.splice(r,1)}}export class ArrayListener{constructor(e,t){this.event=e,this.handler=t}}export class ArrayEvent{static get BeforeAll(){return"before-all"}static get BeforeCopyWithin(){return"before-copy-within"}static get BeforeFill(){return"before-fill"}static get BeforePop(){return"before-pop"}static get BeforePush(){return"before-push"}static get BeforeReverse(){return"before-reverse"}static get BeforeShift(){return"before-shift"}static get BeforeSort(){return"before-sort"}static get BeforeSplice(){return"before-splice"}static get BeforeUnshift(){return"before-unshift"}static get AfterAll(){return"after-all"}static get AfterCopyWithin(){return"after-copy-within"}static get AfterFill(){return"after-fill"}static get AfterPop(){return"after-pop"}static get AfterPush(){return"after-push"}static get AfterReverse(){return"after-reverse"}static get AfterShift(){return"after-shift"}static get AfterSort(){return"after-sort"}static get AfterSplice(){return"after-splice"}static get AfterUnshift(){return"after-unshift"}}function _array_findListener(e,t,r){let i=-1;const s=e._private.get(privateKey);for(let e=0;e<s.listeners.length;e++){let n=s.listeners[e].event.toLowerCase();if(n==t&&(n.afterChange==r||n.beforeChange==r)){i=e;break}}return i}function _dispatchEvents(e,t,r,i){for(let s=0;s<t.length;s++){let n=t[s];n.event.toLowerCase().indexOf(r)>-1&&n.handler(e,...i)}}